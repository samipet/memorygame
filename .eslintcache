[{"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\index.js":"1","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\components\\App.js":"2","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\index.js":"3","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\components\\gamePage.js":"4","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\components\\startPage.js":"5","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\boardReducer.js":"6","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\crushReducer.js":"7","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\previousClickReducer.js":"8","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\clickReducer.js":"9","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\boardSizeReducer.js":"10","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\components\\tile.js":"11","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\actions\\types.js":"12","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\actions\\index.js":"13","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\imageProviderReducer.js":"14","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\imagesLoadedReducer.js":"15","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\coverReducer.js":"16","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\coverBoardReducer.js":"17","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\victoryReducer.js":"18","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\allowImagesReducer.js":"19","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\rejectedImagesReducer.js":"20"},{"size":624,"mtime":1638478217036,"results":"21","hashOfConfig":"22"},{"size":409,"mtime":1639006068451,"results":"23","hashOfConfig":"22"},{"size":1116,"mtime":1640306459120,"results":"24","hashOfConfig":"22"},{"size":12617,"mtime":1640425536563,"results":"25","hashOfConfig":"22"},{"size":10926,"mtime":1639683369699,"results":"26","hashOfConfig":"22"},{"size":2001,"mtime":1640293734801,"results":"27","hashOfConfig":"22"},{"size":565,"mtime":1638290549727,"results":"28","hashOfConfig":"22"},{"size":810,"mtime":1639006647723,"results":"29","hashOfConfig":"22"},{"size":681,"mtime":1639006585985,"results":"30","hashOfConfig":"22"},{"size":335,"mtime":1639670929653,"results":"31","hashOfConfig":"22"},{"size":4226,"mtime":1640306578163,"results":"32","hashOfConfig":"22"},{"size":956,"mtime":1640425200896,"results":"33","hashOfConfig":"22"},{"size":5175,"mtime":1640305039281,"results":"34","hashOfConfig":"22"},{"size":312,"mtime":1638400098118,"results":"35","hashOfConfig":"22"},{"size":467,"mtime":1640305089541,"results":"36","hashOfConfig":"22"},{"size":247,"mtime":1639068503010,"results":"37","hashOfConfig":"22"},{"size":1847,"mtime":1640130103742,"results":"38","hashOfConfig":"22"},{"size":295,"mtime":1639075827115,"results":"39","hashOfConfig":"22"},{"size":372,"mtime":1640301972098,"results":"40","hashOfConfig":"22"},{"size":400,"mtime":1640304517719,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1ji2gls",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"44"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"44"},"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\index.js",[],["95","96"],"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\components\\App.js",[],"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\index.js",[],"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\components\\gamePage.js",["97","98","99"],"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\components\\startPage.js",[],"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\boardReducer.js",["100"],"import { NEW_GAME, TILE_CLICK, CRUSH_TILES, CHANGE_BOARD_SIZE, CLEAR_BOARD } from '../actions/types';\r\nimport { boardSizeX, boardSizeY } from '../actions/types';\r\n\r\nexport default (board = new Array(boardSizeX).fill(\"empty\").map(() => new Array(boardSizeY).fill(\"empty\").map(() => new Array(1).fill(\"empty\"))), action) => {\r\n    switch (action.type) {\r\n        case TILE_CLICK:\r\n            let newBoard = board.map(item => { return [...item]}); //spreading multidimensinal array\r\n            if (action.payload.previousClick.length && !(action.payload.previousClick[0] === action.payload.x && action.payload.previousClick[1] === action.payload.y)) {\r\n                if (newBoard[action.payload.x][action.payload.y][0] === newBoard[action.payload.previousClick[0]][action.payload.previousClick[1]][0]) {\r\n                    newBoard[action.payload.x][action.payload.y][0] = \"crush\";\r\n                    newBoard[action.payload.previousClick[0]][action.payload.previousClick[1]][0] = \"crush\";\r\n                    return newBoard;\r\n                }\r\n            }\r\n            return newBoard;\r\n        case CRUSH_TILES:\r\n            let newBoard2 = board.map(item => { return [...item]}); //spreading multidimensinal array\r\n            newBoard2[action.payload.x][action.payload.y].shift();\r\n            return newBoard2;\r\n        case CHANGE_BOARD_SIZE:\r\n            return new Array(action.payload.boardSize[0]).fill(\"empty\").map(() => new Array(action.payload.boardSize[1]).fill(\"empty\").map(() => new Array(1).fill(\"empty\")));\r\n        case CLEAR_BOARD:\r\n            return new Array(action.payload.boardSize[0]).fill(\"empty2\").map(() => new Array(action.payload.boardSize[1]).fill(\"empty2\").map(() => new Array(1).fill(\"empty2\")));\r\n        case NEW_GAME:\r\n            let newBoard3 = action.payload.board.map(item => { return [...item.map(item => { return [...item]})]}); //spreading multidimensinal array\r\n            return newBoard3;\r\n        default:\r\n            return board;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\crushReducer.js",["101"],"import { NEW_GAME, TILE_CLICK, CRUSH_TILES } from '../actions/types';\r\n\r\nexport default (crush=false, action) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return false;\r\n        case TILE_CLICK:\r\n            let newBoard = action.payload.board.flat(2);\r\n            if (newBoard.some((element) => element === \"crush\")) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        case CRUSH_TILES:\r\n            return false;\r\n        default:\r\n            return crush;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\previousClickReducer.js",["102"],"import { TILE_CLICK, NEW_GAME } from '../actions/types';\r\n\r\nexport default (previousClick=[], action) => {\r\n    switch (action.type) {\r\n        case TILE_CLICK:\r\n            //click goes to empty previousClick\r\n            if (!action.payload.previousClick.length){\r\n                const newPreviousClick = [action.payload.x, action.payload.y];\r\n                return newPreviousClick;\r\n            }\r\n            //same tile click again clears previousClick\r\n            else if (action.payload.previousClick[0] === action.payload.x && action.payload.previousClick[1] === action.payload.y){\r\n                return [];\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        case NEW_GAME:\r\n            return [];\r\n        default:\r\n            return previousClick;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\clickReducer.js",["103"],"import { TILE_CLICK, NEW_GAME } from '../actions/types';\r\n\r\nexport default (click=[], action) => {\r\n    switch (action.type) {\r\n        case TILE_CLICK:\r\n            if (action.payload.previousClick.length) {\r\n                if (action.payload.previousClick[0] === action.payload.x && action.payload.previousClick[1] === action.payload.y){\r\n                    return [];\r\n                }\r\n                else {\r\n                    return [action.payload.x, action.payload.y];\r\n                }\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        case NEW_GAME:\r\n            return [];\r\n        default:\r\n            return click;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\boardSizeReducer.js",["104"],"import { CHANGE_BOARD_SIZE, boardSizeX, boardSizeY, boardSizeZ } from '../actions/types';\r\n\r\nexport default (boardSize=[boardSizeX, boardSizeY, boardSizeZ], action) => {\r\n    switch (action.type) {\r\n        case CHANGE_BOARD_SIZE:\r\n            return action.payload.boardSize;\r\n        default:\r\n            return boardSize;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\components\\tile.js",[],"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\actions\\types.js",[],"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\actions\\index.js",[],"C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\imageProviderReducer.js",["105"],"import { CHANGE_IMAGE_PROVIDER, IMAGE_PROVIDER} from '../actions/types';\r\n\r\nexport default (imageProvider=IMAGE_PROVIDER, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_IMAGE_PROVIDER:\r\n            return action.payload.imageProvider;\r\n        default:\r\n            return imageProvider;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\imagesLoadedReducer.js",["106"],"import { IMAGE_LOADED, NEW_GAME, CLEAR_BOARD, ADD_IMAGES } from '../actions/types';\r\n\r\nexport default (imagesLoaded=0, action) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return 0;\r\n        case IMAGE_LOADED:\r\n            return imagesLoaded + 1;\r\n        case ADD_IMAGES:\r\n            return imagesLoaded + action.payload.count;\r\n        case CLEAR_BOARD:\r\n            return 0;\r\n        default:\r\n            return imagesLoaded;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\coverReducer.js",["107"],"import { CHANGE_COVER } from '../actions/types';\r\n\r\nexport default (cover = true, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_COVER:\r\n            return action.payload.cover;\r\n        default:\r\n            return cover;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\coverBoardReducer.js",["108"],"import { boardSizeX, boardSizeY, CHANGE_BOARD_SIZE, TILE_CLICK, CRUSH_TILES, NEW_GAME } from '../actions/types';\r\n\r\nexport default (coverBoard = new Array(boardSizeX).fill(1).map(() => new Array(boardSizeY).fill(1)), action) => {\r\n    switch (action.type) {\r\n        case CHANGE_BOARD_SIZE:\r\n            return new Array(action.payload.boardSize[0]).fill(1).map(() => new Array(action.payload.boardSize[1]).fill(1));\r\n        case TILE_CLICK:\r\n            if (action.payload.previousClick.length) {\r\n                if (action.payload.previousClick[0] === action.payload.x && action.payload.previousClick[1] === action.payload.y){\r\n                    return new Array(action.payload.boardSize[0]).fill(1).map(() => new Array(action.payload.boardSize[1]).fill(1));\r\n                }\r\n                else {\r\n                    let coverArray = new Array(action.payload.boardSize[0]).fill(1).map(() => new Array(action.payload.boardSize[1]).fill(1));\r\n                    coverArray[action.payload.x][action.payload.y] = 0;\r\n                    coverArray[action.payload.previousClick[0]][action.payload.previousClick[1]] = 0;\r\n                    return coverArray;\r\n                }\r\n            }\r\n            else {\r\n                let coverArray2 = new Array(action.payload.boardSize[0]).fill(1).map(() => new Array(action.payload.boardSize[1]).fill(1));\r\n                coverArray2[action.payload.x][action.payload.y] = 0;\r\n                return coverArray2;\r\n            }\r\n        case NEW_GAME:\r\n            return new Array(action.payload.boardSize[0]).fill(1).map(() => new Array(action.payload.boardSize[1]).fill(1));\r\n        case CRUSH_TILES:\r\n            return new Array(action.payload.boardSize[0]).fill(1).map(() => new Array(action.payload.boardSize[1]).fill(1));\r\n        default:\r\n            return coverBoard;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\victoryReducer.js",["109"],"import { NEW_GAME, SET_VICTORY } from '../actions/types';\r\n\r\nexport default (victory = false, action) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return false;\r\n        case SET_VICTORY:\r\n            return true;\r\n        default:\r\n            return victory;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\allowImagesReducer.js",["110"],"import { NEW_GAME, ALLOW_IMAGES, CLEAR_BOARD } from '../actions/types';\r\n\r\nexport default (allowImages = false, action) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return false;\r\n        case CLEAR_BOARD:\r\n            return false;\r\n        case ALLOW_IMAGES:\r\n            return true;\r\n        default:\r\n            return allowImages;\r\n    }\r\n}","C:\\Users\\SP\\Documents\\code\\memorygame\\src\\reducers\\rejectedImagesReducer.js",["111"],"import { NEW_GAME, REJECT_IMAGE } from '../actions/types';\r\n\r\nexport default (rejectedImages=[], action) => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return [];\r\n        case REJECT_IMAGE:\r\n            let images = [...rejectedImages];\r\n            images.push(action.payload.image);\r\n            return images;\r\n        default:\r\n            return rejectedImages;\r\n    }\r\n}",{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":214,"column":13,"nodeType":"118","messageId":"119","endLine":215,"endColumn":41},{"ruleId":"120","severity":1,"message":"121","line":253,"column":25,"nodeType":"122","endLine":253,"endColumn":172},{"ruleId":"120","severity":1,"message":"121","line":260,"column":25,"nodeType":"122","endLine":260,"endColumn":108},{"ruleId":"123","severity":1,"message":"124","line":4,"column":1,"nodeType":"125","endLine":30,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":20,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":23,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":22,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":10,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":10,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":16,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":10,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":31,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":12,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":14,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":14,"endColumn":2},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]